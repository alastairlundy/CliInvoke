### YamlMime:ManagedReference
items:
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  commentId: T:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  id: IArgumentsBuilder
  parent: AlastairLundy.CliInvoke.Builders.Abstractions
  children:
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable})
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Boolean)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo,System.Boolean)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.IFormatProvider,System.Boolean)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.String})
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.Boolean)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.Globalization.CultureInfo)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.Globalization.CultureInfo,System.Boolean)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.IFormatProvider,System.Boolean)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.String)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.String,System.Boolean)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Clear
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.EscapeSpecialCharacters(System.String)
  - AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.ToString
  langs:
  - csharp
  - vb
  name: IArgumentsBuilder
  nameWithType: IArgumentsBuilder
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  type: Interface
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: IArgumentsBuilder
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 21
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: An interface that defines the fluent builder methods all ArgumentsBuilder classes must implement.
  example: []
  syntax:
    content: public interface IArgumentsBuilder
    content.vb: Public Interface IArgumentsBuilder
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.String,System.Boolean)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.String,System.Boolean)
  id: Add(System.String,System.Boolean)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(string, bool)
  nameWithType: IArgumentsBuilder.Add(string, bool)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(string, bool)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 29
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a string value to the arguments builder.
  example: []
  syntax:
    content: IArgumentsBuilder Add(string value, bool escape)
    parameters:
    - id: value
      type: System.String
      description: The string value to append.
    - id: escape
      type: System.Boolean
      description: True to escape special characters in the value, false otherwise.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(value As String, escape As Boolean) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(String, Boolean)
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(String, Boolean)
  name.vb: Add(String, Boolean)
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.String)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.String)
  id: Add(System.String)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(string)
  nameWithType: IArgumentsBuilder.Add(string)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(string)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 36
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a string value to the arguments builder without escaping special characters.
  example: []
  syntax:
    content: IArgumentsBuilder Add(string value)
    parameters:
    - id: value
      type: System.String
      description: The string value to append.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(value As String) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(String)
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(String)
  name.vb: Add(String)
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  id: Add(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<string>, bool)
  nameWithType: IArgumentsBuilder.Add(IEnumerable<string>, bool)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable<string>, bool)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 44
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a collection of string values to the arguments builder.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IEnumerable<string> values, bool escapeSpecialChars)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The collection of string values to append.
    - id: escapeSpecialChars
      type: System.Boolean
      description: Whether to escape special characters in the values.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(values As IEnumerable(Of String), escapeSpecialChars As Boolean) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(IEnumerable(Of String), Boolean)
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable(Of String), Boolean)
  name.vb: Add(IEnumerable(Of String), Boolean)
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.String})
  id: Add(System.Collections.Generic.IEnumerable{System.String})
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<string>)
  nameWithType: IArgumentsBuilder.Add(IEnumerable<string>)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable<string>)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 51
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a collection of string values to the arguments builder without escaping special characters.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IEnumerable<string> values)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The collection of string values to append.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(values As IEnumerable(Of String)) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(IEnumerable(Of String))
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable(Of String))
  name.vb: Add(IEnumerable(Of String))
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.IFormatProvider,System.Boolean)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.IFormatProvider,System.Boolean)
  id: Add(System.IFormattable,System.IFormatProvider,System.Boolean)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IFormattable, IFormatProvider, bool)
  nameWithType: IArgumentsBuilder.Add(IFormattable, IFormatProvider, bool)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable, System.IFormatProvider, bool)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 60
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a formattable value to the arguments builder.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IFormattable value, IFormatProvider formatProvider, bool escapeSpecialChars = true)
    parameters:
    - id: value
      type: System.IFormattable
      description: The formattable value to append.
    - id: formatProvider
      type: System.IFormatProvider
      description: The format provider to use for formatting the value.
    - id: escapeSpecialChars
      type: System.Boolean
      description: Whether to escape special characters in the values.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(value As IFormattable, formatProvider As IFormatProvider, escapeSpecialChars As Boolean = True) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(IFormattable, IFormatProvider, Boolean)
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable, System.IFormatProvider, Boolean)
  name.vb: Add(IFormattable, IFormatProvider, Boolean)
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.Globalization.CultureInfo,System.Boolean)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.Globalization.CultureInfo,System.Boolean)
  id: Add(System.IFormattable,System.Globalization.CultureInfo,System.Boolean)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IFormattable, CultureInfo, bool)
  nameWithType: IArgumentsBuilder.Add(IFormattable, CultureInfo, bool)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable, System.Globalization.CultureInfo, bool)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 69
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a formattable value to the arguments builder using the specified culture.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IFormattable value, CultureInfo cultureInfo, bool escapeSpecialChars)
    parameters:
    - id: value
      type: System.IFormattable
      description: The formattable value to append.
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use for formatting the value.
    - id: escapeSpecialChars
      type: System.Boolean
      description: Whether to escape special characters in the values.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(value As IFormattable, cultureInfo As CultureInfo, escapeSpecialChars As Boolean) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(IFormattable, CultureInfo, Boolean)
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable, System.Globalization.CultureInfo, Boolean)
  name.vb: Add(IFormattable, CultureInfo, Boolean)
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.Globalization.CultureInfo)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.Globalization.CultureInfo)
  id: Add(System.IFormattable,System.Globalization.CultureInfo)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IFormattable, CultureInfo)
  nameWithType: IArgumentsBuilder.Add(IFormattable, CultureInfo)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 77
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a formattable value to the arguments builder using the specified culture without escaping special characters.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IFormattable value, CultureInfo cultureInfo)
    parameters:
    - id: value
      type: System.IFormattable
      description: The formattable value to append.
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use for formatting the value.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(value As IFormattable, cultureInfo As CultureInfo) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.Boolean)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable,System.Boolean)
  id: Add(System.IFormattable,System.Boolean)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IFormattable, bool)
  nameWithType: IArgumentsBuilder.Add(IFormattable, bool)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable, bool)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 85
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a formattable value to the arguments builder.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IFormattable value, bool escapeSpecialChars)
    parameters:
    - id: value
      type: System.IFormattable
      description: The formattable value to append.
    - id: escapeSpecialChars
      type: System.Boolean
      description: Whether to escape special characters in the values.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(value As IFormattable, escapeSpecialChars As Boolean) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(IFormattable, Boolean)
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable, Boolean)
  name.vb: Add(IFormattable, Boolean)
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable)
  id: Add(System.IFormattable)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IFormattable)
  nameWithType: IArgumentsBuilder.Add(IFormattable)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.IFormattable)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 92
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a formattable value to the arguments builder without specifying a culture and without escaping special characters.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IFormattable value)
    parameters:
    - id: value
      type: System.IFormattable
      description: The formattable value to append.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(value As IFormattable) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.IFormatProvider,System.Boolean)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.IFormatProvider,System.Boolean)
  id: Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.IFormatProvider,System.Boolean)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<IFormattable>, IFormatProvider, bool)
  nameWithType: IArgumentsBuilder.Add(IEnumerable<IFormattable>, IFormatProvider, bool)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable<System.IFormattable>, System.IFormatProvider, bool)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 101
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a collection of formattable values to the arguments builder.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IEnumerable<IFormattable> values, IFormatProvider formatProvider, bool escapeSpecialChars = true)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.IFormattable}
      description: The collection of formattable values to append.
    - id: formatProvider
      type: System.IFormatProvider
      description: The format provider to use for formatting the values.
    - id: escapeSpecialChars
      type: System.Boolean
      description: Whether to escape special characters in the values.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(values As IEnumerable(Of IFormattable), formatProvider As IFormatProvider, escapeSpecialChars As Boolean = True) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(IEnumerable(Of IFormattable), IFormatProvider, Boolean)
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable(Of System.IFormattable), System.IFormatProvider, Boolean)
  name.vb: Add(IEnumerable(Of IFormattable), IFormatProvider, Boolean)
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo,System.Boolean)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo,System.Boolean)
  id: Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo,System.Boolean)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<IFormattable>, CultureInfo, bool)
  nameWithType: IArgumentsBuilder.Add(IEnumerable<IFormattable>, CultureInfo, bool)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable<System.IFormattable>, System.Globalization.CultureInfo, bool)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 110
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a collection of formattable values to the arguments builder using the specified culture.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IEnumerable<IFormattable> values, CultureInfo cultureInfo, bool escapeSpecialChars)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.IFormattable}
      description: The collection of formattable values to append.
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use for formatting the values.
    - id: escapeSpecialChars
      type: System.Boolean
      description: Whether to escape special characters in the values.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(values As IEnumerable(Of IFormattable), cultureInfo As CultureInfo, escapeSpecialChars As Boolean) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(IEnumerable(Of IFormattable), CultureInfo, Boolean)
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable(Of System.IFormattable), System.Globalization.CultureInfo, Boolean)
  name.vb: Add(IEnumerable(Of IFormattable), CultureInfo, Boolean)
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo)
  id: Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<IFormattable>, CultureInfo)
  nameWithType: IArgumentsBuilder.Add(IEnumerable<IFormattable>, CultureInfo)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable<System.IFormattable>, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 118
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a collection of formattable values to the arguments builder using the specified culture without escaping special characters.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IEnumerable<IFormattable> values, CultureInfo cultureInfo)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.IFormattable}
      description: The collection of formattable values to append.
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use for formatting the values.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(values As IEnumerable(Of IFormattable), cultureInfo As CultureInfo) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(IEnumerable(Of IFormattable), CultureInfo)
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable(Of System.IFormattable), System.Globalization.CultureInfo)
  name.vb: Add(IEnumerable(Of IFormattable), CultureInfo)
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Boolean)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Boolean)
  id: Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Boolean)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<IFormattable>, bool)
  nameWithType: IArgumentsBuilder.Add(IEnumerable<IFormattable>, bool)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable<System.IFormattable>, bool)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 126
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a collection of formattable values to the arguments builder without specifying a culture.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IEnumerable<IFormattable> values, bool escapeSpecialChars)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.IFormattable}
      description: The collection of formattable values to append.
    - id: escapeSpecialChars
      type: System.Boolean
      description: Whether to escape special characters in the values.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(values As IEnumerable(Of IFormattable), escapeSpecialChars As Boolean) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(IEnumerable(Of IFormattable), Boolean)
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable(Of System.IFormattable), Boolean)
  name.vb: Add(IEnumerable(Of IFormattable), Boolean)
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable})
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable})
  id: Add(System.Collections.Generic.IEnumerable{System.IFormattable})
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<IFormattable>)
  nameWithType: IArgumentsBuilder.Add(IEnumerable<IFormattable>)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable<System.IFormattable>)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Add
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 133
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Appends a collection of formattable values to the arguments builder without specifying a culture and without escaping special characters.
  example: []
  syntax:
    content: IArgumentsBuilder Add(IEnumerable<IFormattable> values)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.IFormattable}
      description: The collection of formattable values to append.
    return:
      type: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
      description: A new instance of the IArgumentsBuilder with the updated arguments.
    content.vb: Function Add(values As IEnumerable(Of IFormattable)) As IArgumentsBuilder
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  nameWithType.vb: IArgumentsBuilder.Add(IEnumerable(Of IFormattable))
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add(System.Collections.Generic.IEnumerable(Of System.IFormattable))
  name.vb: Add(IEnumerable(Of IFormattable))
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.EscapeSpecialCharacters(System.String)
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.EscapeSpecialCharacters(System.String)
  id: EscapeSpecialCharacters(System.String)
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: EscapeSpecialCharacters(string)
  nameWithType: IArgumentsBuilder.EscapeSpecialCharacters(string)
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.EscapeSpecialCharacters(string)
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: EscapeSpecialCharacters
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 135
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  syntax:
    content: string EscapeSpecialCharacters(string argument)
    parameters:
    - id: argument
      type: System.String
    return:
      type: System.String
    content.vb: Function EscapeSpecialCharacters(argument As String) As String
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.EscapeSpecialCharacters*
  nameWithType.vb: IArgumentsBuilder.EscapeSpecialCharacters(String)
  fullName.vb: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.EscapeSpecialCharacters(String)
  name.vb: EscapeSpecialCharacters(String)
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.ToString
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.ToString
  id: ToString
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: IArgumentsBuilder.ToString()
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.ToString()
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: ToString
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 141
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Builds the arguments into a string.
  example: []
  syntax:
    content: string ToString()
    return:
      type: System.String
      description: The arguments as a string.
    content.vb: Function ToString() As String
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.ToString*
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Clear
  commentId: M:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Clear
  id: Clear
  parent: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: IArgumentsBuilder.Clear()
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Clear()
  type: Method
  source:
    remote:
      path: src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
      branch: add-docfx
      repo: https://github.com/alastairlundy/CliInvoke.git
    id: Clear
    path: ../src/CliInvoke/Builders/Abstractions/IArgumentsBuilder.cs
    startLine: 146
  assemblies:
  - AlastairLundy.CliInvoke
  namespace: AlastairLundy.CliInvoke.Builders.Abstractions
  summary: Clears the provided argument strings.
  example: []
  syntax:
    content: void Clear()
    content.vb: Sub Clear()
  overload: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Clear*
references:
- uid: AlastairLundy.CliInvoke.Builders.Abstractions
  commentId: N:AlastairLundy.CliInvoke.Builders.Abstractions
  href: AlastairLundy.html
  name: AlastairLundy.CliInvoke.Builders.Abstractions
  nameWithType: AlastairLundy.CliInvoke.Builders.Abstractions
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions
  spec.csharp:
  - uid: AlastairLundy
    name: AlastairLundy
    href: AlastairLundy.html
  - name: .
  - uid: AlastairLundy.CliInvoke
    name: CliInvoke
    href: AlastairLundy.CliInvoke.html
  - name: .
  - uid: AlastairLundy.CliInvoke.Builders
    name: Builders
    href: AlastairLundy.CliInvoke.Builders.html
  - name: .
  - uid: AlastairLundy.CliInvoke.Builders.Abstractions
    name: Abstractions
    href: AlastairLundy.CliInvoke.Builders.Abstractions.html
  spec.vb:
  - uid: AlastairLundy
    name: AlastairLundy
    href: AlastairLundy.html
  - name: .
  - uid: AlastairLundy.CliInvoke
    name: CliInvoke
    href: AlastairLundy.CliInvoke.html
  - name: .
  - uid: AlastairLundy.CliInvoke.Builders
    name: Builders
    href: AlastairLundy.CliInvoke.Builders.html
  - name: .
  - uid: AlastairLundy.CliInvoke.Builders.Abstractions
    name: Abstractions
    href: AlastairLundy.CliInvoke.Builders.Abstractions.html
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add*
  commentId: Overload:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add
  href: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.html#AlastairLundy_CliInvoke_Builders_Abstractions_IArgumentsBuilder_Add_System_String_System_Boolean_
  name: Add
  nameWithType: IArgumentsBuilder.Add
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Add
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  commentId: T:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
  parent: AlastairLundy.CliInvoke.Builders.Abstractions
  href: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.html
  name: IArgumentsBuilder
  nameWithType: IArgumentsBuilder
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformattable
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
- uid: System.Collections.Generic.IEnumerable{System.IFormattable}
  commentId: T:System.Collections.Generic.IEnumerable{System.IFormattable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IFormattable>
  nameWithType: IEnumerable<IFormattable>
  fullName: System.Collections.Generic.IEnumerable<System.IFormattable>
  nameWithType.vb: IEnumerable(Of IFormattable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.IFormattable)
  name.vb: IEnumerable(Of IFormattable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.IFormattable
    name: IFormattable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.IFormattable
    name: IFormattable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable
  - name: )
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.EscapeSpecialCharacters*
  commentId: Overload:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.EscapeSpecialCharacters
  href: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.html#AlastairLundy_CliInvoke_Builders_Abstractions_IArgumentsBuilder_EscapeSpecialCharacters_System_String_
  name: EscapeSpecialCharacters
  nameWithType: IArgumentsBuilder.EscapeSpecialCharacters
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.EscapeSpecialCharacters
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.ToString*
  commentId: Overload:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.ToString
  href: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.html#AlastairLundy_CliInvoke_Builders_Abstractions_IArgumentsBuilder_ToString
  name: ToString
  nameWithType: IArgumentsBuilder.ToString
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.ToString
- uid: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Clear*
  commentId: Overload:AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Clear
  href: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.html#AlastairLundy_CliInvoke_Builders_Abstractions_IArgumentsBuilder_Clear
  name: Clear
  nameWithType: IArgumentsBuilder.Clear
  fullName: AlastairLundy.CliInvoke.Builders.Abstractions.IArgumentsBuilder.Clear
