<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>netstandard2.0;net8.0;net9.0;net10.0;</TargetFrameworks>
        <LangVersion>14</LangVersion>
        <ImplicitUsings>disable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <RepositoryType>git</RepositoryType>
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <Version>2.0.0</Version>
        <Title>CliInvoke.Extensions</Title>
        <Authors>AlastairLundy</Authors>
        <Description>Adds a ``AddCliInvoke`` Dependency Injection extension method to enable easy CliInvoke setup when using the Microsoft.Extensions.DependencyInjection package.</Description>
        <Copyright>Copyright (c) Alastair Lundy 2024-2025</Copyright>
        <RepositoryUrl>https://github.com/alastairlundy/CliInvoke</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PackageReleaseNotes>## Changes since 1.6.x
* Updated to support CliInvoke 2.0.0
* Added ``IProcessConfigurationFactory`` and ``ProcessConfigurationFactory`` dependency injection setup to the ``AddCliInvoke`` extension method
* Added convenience extension methods that make CliInvoke more ergonomic to use.</PackageReleaseNotes>
        <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
        <PackageLicenseExpression>MPL-2.0</PackageLicenseExpression>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <PackageTags>shell, cli, process, wrapping, commandline,</PackageTags>
        <EmbedUntrackedSources>true</EmbedUntrackedSources>
        <PackageIcon>icon.png</PackageIcon>
        <RootNamespace>AlastairLundy.CliInvoke.Extensions</RootNamespace>
        <AssemblyName>AlastairLundy.CliInvoke.Extensions</AssemblyName>
    </PropertyGroup>
    
    <ItemGroup>
        <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="10.0.0-rc.2.25502.107" />
    </ItemGroup>

    <PropertyGroup>
        <!-- default false, CI can set to true -->
        <UsePublishedPackages Condition="'$(UsePublishedPackages)'==''">false</UsePublishedPackages>
    </PropertyGroup>

    <ItemGroup Condition="'$(UsePublishedPackages)'=='false'">
        <ProjectReference Include="..\CliInvoke.Core\CliInvoke.Core.csproj" />
        <ProjectReference Include="..\CliInvoke\CliInvoke.csproj"/>
    </ItemGroup>

    <ItemGroup Condition="'$(UsePublishedPackages)'=='true'">
        <!-- set CliInvokeCoreVersion in the workflow -->
        <PackageReference Include="AlastairLundy.CliInvoke.Core" Version="$(CliInvokeCoreVersion)" />
        <PackageReference Include="AlastairLundy.CliInvoke" Version="$(CliInvokeVersion)" />
    </ItemGroup>

    <ItemGroup>
        <Content Include="README.md">
            <Link>README.md</Link>
            <PackagePath>README.md</PackagePath>
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </Content>
    </ItemGroup>

    <ItemGroup>
      <None Include="..\..\.assets\icon.png">
        <Pack>True</Pack>
        <PackagePath></PackagePath>
        <Link>icon.png</Link>
      </None>
    </ItemGroup>

    <ItemGroup>
      <EmbeddedResource Update="Internal\Localizations\Resources.resx">
        <Generator>ResXFileCodeGenerator</Generator>
        <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      </EmbeddedResource>
    </ItemGroup>

    <ItemGroup>
      <Compile Update="Internal\Localizations\Resources.Designer.cs">
        <DesignTime>True</DesignTime>
        <AutoGen>True</AutoGen>
        <DependentUpon>Resources.resx</DependentUpon>
      </Compile>
    </ItemGroup>
</Project>
