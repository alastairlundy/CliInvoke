name: Publish All Packages Sequentially

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  dispatch-and-wait:
    runs-on: ubuntu-latest

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - name: Dispatch each publish workflow and wait for completion
      uses: actions/github-script@v6
      with:
        script: |
          // This script dispatches workflows and polls for their completion sequentially.
          const workflows = [
            'publish/publish-core.yml',
            'publish/publish-main.yml',
            'publish/publish-specializations.yml',
            'publish/publish-extensions.yml'
          ];

          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const ref = 'main'; // change if you dispatch to a different branch/ref
          const pollIntervalMs = 60_000; // 60s
          const timeoutMs = 5 * 60 * 1000; // 5 Minute timeout per workflow

          const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

          for (const workflow of workflows) {
            console.log(`Dispatching workflow: ${workflow} (ref=${ref})`);
            await github.rest.actions.createWorkflowDispatch({
              owner,
              repo,
              workflow_id: workflow,
              ref
            });

            console.log(`Waiting for ${workflow} to run and finish...`);
            const startedAt = Date.now();

            while (true) {
              // List recent runs for this workflow
              const runsResp = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id: workflow,
                per_page: 10
              });

              const runs = runsResp.data.workflow_runs || [];
              // Prefer a run on the requested ref/branch if available, otherwise take the most recent
              let run = runs.find(r => r.head_branch === ref) || runs[0];

              if (run) {
                console.log(`Found run id=${run.id} status=${run.status} conclusion=${run.conclusion} created_at=${run.created_at}`);
                if (run.status === 'completed') {
                  if (run.conclusion === 'success') {
                    console.log(`${workflow} succeeded (run id=${run.id}). Proceeding to next workflow.`);
                    break;
                  } else {
                    throw new Error(`${workflow} completed with conclusion: ${run.conclusion} (run id=${run.id})`);
                  }
                }
              } else {
                console.log(`No run found yet for ${workflow}.`);
              }

              if ((Date.now() - startedAt) > timeoutMs) {
                throw new Error(`Timed out waiting for workflow ${workflow} to complete after ${timeoutMs/1000}s`);
              }

              await sleep(pollIntervalMs);
            }
          }

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
